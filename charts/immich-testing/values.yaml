## This chart relies on the common library chart from bjw-s-labs
## You can find it at https://github.com/bjw-s-labs/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components

env:
  REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
  DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
  DB_USERNAME: "{{ .Values.postgresql.auth.username }}"
  DB_DATABASE_NAME: "{{ .Values.postgresql.auth.database }}"
  # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
  DB_PASSWORD: "{{ .Values.postgresql.auth.password }}"
  IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'

image:
  repository: ghcr.io/immich-app/immich-server
  tag: v1.135.3

immich:
  metrics:
    # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
    enabled: false
  persistence:
    # Main data store for all photos shared between different components.
    library:
      # existingClaim is exactly what we specify below and create with library-pvc.yaml
      existingClaim: immich-library
      enabled: true
      accessMode: ReadWriteOnce
      size: 1Ti
      storageClass: nfs-client
    external:
      # existingClaim is exactly what we specify below and create with external-pvc.yaml
      existingClaim: immich-external
      enabled: true
      accessMode: ReadWriteOnce
      size: 1Ti
      storageClass: nfs-client
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  #
  configuration:
    {}
    # trash:
    #   enabled: false
    #   days: 30
    # storageTemplate:
    #   enabled: true
    #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

# Dependencies

postgresql:
  enabled: true
  image:
    repository: tensorchord/pgvecto-rs
    tag: pg14-v0.3.0
  auth:
    username: immich
    database: immich
    password: TODOCHANGEME
  global:
    security:
      allowInsecureImages: true
  primary:
    configuration: |
      include_dir = 'conf.d'
    customLivenessProbe:
      tcpSocket:
        port: tcp-postgresql
    customReadinessProbe:
      tcpSocket:
        port: tcp-postgresql
    customStartupProbe:
      tcpSocket:
        port: tcp-postgresql
    persistence:
      enabled: true
      accessMode: ReadWriteOnce
      size: 1Gi
      storageClass: nfs-client
    startupProbe:
      enabled: true
      # Give DB time to revive itself from interruption ; Default is 15
      failureThreshold: 256
    initdb:
      scripts:
        create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;
    containerSecurityContext:
      readOnlyRootFilesystem: false
    extendedConfiguration: |
      logging_collector = off
      log_destination = 'stderr'
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: kubernetes.io/role
                  operator: In
                  values:
                    - worker
    resources:
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      requests:
        cpu: 1000m
        memory: 1024Mi
redis:
  enabled: true
  architecture: standalone
  master:
    persistence:
      enabled: false
  auth:
    enabled: false

# Immich components

server:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-server
    pullPolicy: IfNotPresent
  ingress:
    main:
      enabled: false

  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: kubernetes.io/role
                operator: In
                values:
                  - worker

machine-learning:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-machine-learning
    pullPolicy: IfNotPresent
  env:
    TRANSFORMERS_CACHE: /cache
  persistence:
    cache:
      enabled: true
      accessMode: ReadWriteOnce
      size: 10Gi
      storageClass: nfs-client
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: kubernetes.io/role
                operator: In
                values:
                  - worker
